import { type Metadata } from "next";
import { ClerkProvider } from "@clerk/nextjs";
import { esES } from "@clerk/localizations";
import { Bebas_Neue } from "next/font/google";
import { AppProviders } from "@/contexts";
import { ErrorToastProvider } from "../../Components/error-handling/ErrorToastProvider";
import { NextIntlClientProvider } from "next-intl";
import { headers } from "next/headers";
import { getLocaleFromPathname, locales, defaultLocale } from "@/i18n/config";
import "./globals.css";

const bebas = Bebas_Neue({
  weight: "400",
  subsets: ["latin"],
  variable: "--font-bebas",
});

export const metadata: Metadata = {
  title: "Plaython",
  description: "Generated by create next app",
};

async function getMessages(locale: string) {
  try {
    return (await import(`@/i18n/messages/${locale}.json`)).default;
  } catch (error) {
    console.error(`Failed to load messages for locale: ${locale}`, error);
    // Fallback to default locale if the requested locale is not available
    return (await import(`@/i18n/messages/${defaultLocale}.json`)).default;
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Get the pathname from the request headers
  const headersList = await headers();
  const pathname = headersList.get("x-pathname") || "/";

  // Get the locale from the pathname or use the default locale
  const locale = getLocaleFromPathname(pathname) || defaultLocale;

  // Get the messages for the current locale
  const messages = await getMessages(locale);

  // Get the appropriate Clerk localization based on the locale
  const clerkLocalizations: Record<string, any> = {
    es: esES,
    // Add other localizations as needed
    // fr: frFR,
    // de: deDE,
  };

  return (
    <html lang={locale}>
      <body className={`${bebas.variable} antialiased`}>
        <ClerkProvider
          localization={clerkLocalizations[locale] || undefined}
        >
          <NextIntlClientProvider locale={locale} messages={messages}>
            <AppProviders>
              <ErrorToastProvider />
              {children}
            </AppProviders>
          </NextIntlClientProvider>
        </ClerkProvider>
      </body>
    </html>
  );
}
